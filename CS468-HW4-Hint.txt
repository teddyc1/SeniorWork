**********************************
Hints for the HW4 Programming Part
**********************************

There are 6 messages defined in the HW4 specification as shown in Figure 2. All the messages will be 
transmitted via socket as a sequence of bytes. Remember, when you read from an active socket, the read 
or recv function put the received bytes into the given buffer and returns the number of bytes received. 
When you write to an active socket, you need to pass the buffer and number of bytes to be transmmitted 
to the write function.

Before you can transmit any message, you need to construct the message into a buffer. When you receive
some bytes from the socket, you need to parse (or read) the message from the received sequence of bytes.
Since all the 6 message has the same structure at the beginning: 1 byte type, 2 bytes of payload length, 
you can define a C struct to capture that, and use the type cast in C to construct or parse the message 
to/from a given memory buffer.

In summary, you want to define a message construction function and a message parse function for each
of the 6 types of messages. The payload of each type of message could be different. Ek(Nonce2+1|Command)
means we increment the 32-bit Nonce2 and concatenate it with the command string (e.g., "pwd"), and encrypt
that with 256-bit AES CBC mode using key k. k=SHA256(SHA1(PW)|Nonce1|Nonce2) is the SHA256 of the 
concatenation of the SHA1 of the shared password PW, Nonce1 and Nonce2. Therefore, the 256-bite key depends
on not only the shared PW, but also Nonce1 and Nonce2.





